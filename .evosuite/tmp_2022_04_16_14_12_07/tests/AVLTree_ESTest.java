/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 19:13:52 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.delete((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert(3210);
      aVLTree0.insert((-2475));
      aVLTree0.delete((-1920));
      aVLTree0.insert(1195);
      aVLTree0.delete(1195);
      aVLTree0.insert(1195);
      aVLTree0.find(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(352);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.delete(1);
      aVLTree0.insert(13);
      aVLTree0.getRoot();
      aVLTree0.find(1472);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      int int0 = (-1208);
      aVLTree0.insert((-1208));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-181));
      aVLTree0.insert(0);
      int int1 = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      aVLTree_Node1.key = 0;
      aVLTree_Node1.height = 4806;
      int int2 = 126;
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1313));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.insert((-369));
      aVLTree0.insert(1);
      aVLTree0.insert(0);
      aVLTree0.find(1909);
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, int0);
      assertEquals(0, aVLTree0.height());
      
      int int1 = 0;
      aVLTree_Node0.left = aVLTree_Node1.right;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node0.height = 0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node2.left = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree_Node2.right;
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertNotNull(aVLTree_Node3);
      
      aVLTree_Node1.left = aVLTree_Node3;
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(2581);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1725);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-2018));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(2581);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(115);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1040);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-1));
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node2.height = 1040;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node2.key = 1;
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node2);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals((-1041), int0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, aVLTree0.height());
      
      int int2 = 0;
      aVLTree_Node0.left = aVLTree_Node1.right;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node0.height = 0;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node3 = aVLTree_Node2.right;
      assertSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertNotNull(aVLTree_Node3);
      
      aVLTree_Node1.left = aVLTree_Node3;
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1206));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(3210);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(3210);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(3210);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete(1079);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1079);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1206));
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1329);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1841);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1329);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1329);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-2017));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1706);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1675);
      assertEquals(1, aVLTree0.height());
      
      int int0 = (-2768);
      aVLTree0.insert((-2768));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(1675);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-201));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-610));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-610));
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = (-610);
      assertEquals((-610), aVLTree0.height());
      
      aVLTree0.delete((-610));
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(1, int0);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.find((-1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, int0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete(914);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(0);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node3);
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertSame(aVLTree_Node0, aVLTree_Node3);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertSame(aVLTree_Node0, aVLTree_Node2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(677);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-119));
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete((-119));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-119));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-673));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(4158);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-111));
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1921));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-2201));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-344));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1284));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-4125));
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-536));
      aVLTree0.delete(2488);
      aVLTree0.insert(2488);
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.insert((-758));
      aVLTree0.delete(2488);
      aVLTree0.find((-536));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      aVLTree0.insert((-2475));
      aVLTree0.insert(1195);
      aVLTree0.find(0);
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(352);
      aVLTree0.height();
      aVLTree0.delete(1);
      aVLTree0.insert(13);
      aVLTree0.find(1472);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      aVLTree0.getRoot();
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = (-1233);
      aVLTree0.insert((-1233));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1233));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }
}
